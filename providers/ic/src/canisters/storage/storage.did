type AssetKey = record {
  token : opt text;
  sha256 : opt vec nat8;
  name : text;
  full_path : text;
  folder : text;
};
type Chunk = record {content : vec nat8; batch_id : nat};
type CommitBatch = record {
  batch_id : nat;
  headers : vec record {text; text};
  chunk_ids : vec nat;
};
type Del = record {token : opt text; full_path : text};
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record {text; text};
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record {text; text};
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type InitUpload = record {batch_id : nat};
type StreamingCallbackHttpResponse = record {
  token : opt StreamingCallbackToken;
  body : vec nat8;
};
type StreamingCallbackToken = record {
  token : opt text;
  sha256 : opt vec nat8;
  headers : vec record {text; text};
  index : nat64;
  full_path : text;
};
type StreamingStrategy = variant {
  Callback : record {
    token : StreamingCallbackToken;
    callback : func() -> ();
  };
};
type UploadChunk = record {chunk_id : nat};
service : {
  commitUpload : (CommitBatch) -> ();
  cyclesBalance : () -> (nat) query;
  del : (Del) -> ();
  http_request : (HttpRequest) -> (HttpResponse) query;
  http_request_streaming_callback : (StreamingCallbackToken) -> (
    StreamingCallbackHttpResponse
  ) query;
  initUpload : (AssetKey) -> (InitUpload);
  list : (opt text) -> (vec AssetKey) query;
  transferFreezingThresholdCycles : () -> ();
  uploadChunk : (Chunk) -> (UploadChunk);
};
