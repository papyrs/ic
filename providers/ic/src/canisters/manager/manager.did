type definite_canister_settings = 
 record {
   compute_allocation: nat;
   controllers: opt vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
type UserId = principal;
type CanisterStatus = 
 record {
   cycles: nat;
   memory_size: nat;
   module_hash: opt blob;
   settings: definite_canister_settings;
   status: variant {
             running;
             stopped;
             stopping;
           };
 };
type BucketId = principal;
type Bucket = 
 record {
   bucketId: opt BucketId;
   owner: UserId;
 };
service : {
  delData: () -> (bool);
  delStorage: () -> (bool);
  getCanistersStatus: () ->
   (record {
      data: CanisterStatus;
      storage: CanisterStatus;
    });
  getData: () -> (opt Bucket) query;
  getStorage: () -> (opt Bucket) query;
  initData: () -> (Bucket);
  initStorage: () -> (Bucket);
  installCode: (principal, blob, blob) -> ();
  list: (text) -> (vec Bucket) query;
}
